{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/57block/my-app/src/lib/db.ts"],"sourcesContent":["import mysql from 'serverless-mysql';\nimport type { RowDataPacket } from 'mysql2';\nimport type { User } from '@/types/db';\n\nconst db = mysql({\n  config: {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    ssl: process.env.NODE_ENV === 'production' ? {\n      rejectUnauthorized: true\n    } : undefined,\n    connectTimeout: 5000\n  }\n});\n\nexport async function query<T extends RowDataPacket>(\n  sql: string,\n  values?: any\n): Promise<T[]> {\n  try {\n    const results = await db.query<T[]>(sql, values);\n    await db.end();\n    return results;\n  } catch (error) {\n    await db.end();\n    throw error;\n  }\n}\n\nexport default db;"],"names":[],"mappings":";;;;AAAA;;AAIA,MAAM,KAAK,CAAA,GAAA,8IAAA,CAAA,UAAK,AAAD,EAAE;IACf,QAAQ;QACN,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,KAAK,sCAAwC,0BAEzC;QACJ,gBAAgB;IAClB;AACF;AAEO,eAAe,MACpB,GAAW,EACX,MAAY;IAEZ,IAAI;QACF,MAAM,UAAU,MAAM,GAAG,KAAK,CAAM,KAAK;QACzC,MAAM,GAAG,GAAG;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,GAAG,GAAG;QACZ,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///Users/57block/my-app/src/app/api/auth/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport { query } from \"@/lib/db\";\nimport type { UserField } from '@/types/db';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { username, password, mode } = await req.json();\n    \n    // 增强输入验证\n    if (!username || !password) {\n      return NextResponse.json(\n        { message: \"Username and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    // 精确查询只返回必要字段\n    const users = await query<UserField<'id' | 'password'>>(\n      \"SELECT id, password FROM users WHERE username = ? LIMIT 1\",\n      [username]\n    );\n    const user = users[0];\n\n    if (mode === \"signup\") {\n      if (user) {\n        return NextResponse.json(\n          { message: \"Username already registered\" },\n          { status: 409 }\n        );\n      }\n      \n      // 密码强度验证\n      if (password.length < 8) {\n        return NextResponse.json(\n          { message: \"Password must be at least 8 characters\" },\n          { status: 400 }\n        );\n      }\n\n      const hashedPassword = await bcrypt.hash(password, 12);\n      await query(\n        \"INSERT INTO users (username, password) VALUES (?, ?)\",\n        [username, hashedPassword]\n      );\n      \n      return NextResponse.json(\n        { \n          message: \"Registration successful\",\n          username // 返回注册成功的用户名\n        }\n      );\n    }\n\n    // 登录逻辑\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      return NextResponse.json(\n        { message: \"Invalid username or password\" }, // 模糊化错误信息\n        { status: 401 }\n      );\n    }\n    \n    return NextResponse.json({\n      message: \"Login successful\",\n      userId: user.id // 返回用户ID供客户端使用\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      {\n        message: \"Authentication failed\",\n        detail: process.env.NODE_ENV === \"development\" ? error.message : undefined\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnD,SAAS;QACT,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAqC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,cAAc;QACd,MAAM,QAAQ,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EACtB,6DACA;YAAC;SAAS;QAEZ,MAAM,OAAO,KAAK,CAAC,EAAE;QAErB,IAAI,SAAS,UAAU;YACrB,IAAI,MAAM;gBACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAA8B,GACzC;oBAAE,QAAQ;gBAAI;YAElB;YAEA,SAAS;YACT,IAAI,SAAS,MAAM,GAAG,GAAG;gBACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAAyC,GACpD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;YACnD,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EACR,wDACA;gBAAC;gBAAU;aAAe;YAG5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT;YACF;QAEJ;QAEA,OAAO;QACP,IAAI,CAAC,QAAQ,CAAE,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ,GAAI;YAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA+B,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ,KAAK,EAAE,CAAC,eAAe;QACjC;IACF,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,QAAQ,uCAAyC,MAAM,OAAO,GAAG;QACnE,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}