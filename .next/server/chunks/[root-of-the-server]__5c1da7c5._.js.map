{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/57block/my-app/src/app/api/auth/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport mysql from \"mysql2/promise\";\nimport bcrypt from \"bcryptjs\";\nimport { User } from \"@/types/db\";\n\nconst pool = mysql.createPool({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"\",  \n  database: \"userinfo\",\n  waitForConnections: true,\n  connectionLimit: 10,\n});\n\nexport async function POST(req: NextRequest) {\n  const { username, password, mode } = await req.json();\n  \n  // 使用正确的类型声明\n  const [rows] = await pool.query<User[]>(\n    \"SELECT * FROM users WHERE username = ?\", \n    [username]\n  );\n  \n  // 现在 rows 是 User[] 类型\n  const user = rows[0];\n\n  if (mode === \"signup\") {\n    if (user) {\n      return NextResponse.json(\n        { message: \"User exists\" }, \n        { status: 409 }\n      );\n    }\n    \n    const hashedPassword = await bcrypt.hash(password, 12);\n    await pool.execute(\n      \"INSERT INTO users (username, password) VALUES (?, ?)\", \n      [username, hashedPassword]\n    );\n    \n    return NextResponse.json({ message: \"Registered\" });\n  }\n\n  // 现在可以安全访问 user.password\n  if (!user || !(await bcrypt.compare(password, user.password))) {\n    return NextResponse.json(\n      { message: \"Invalid credentials\" }, \n      { status: 401 }\n    );\n  }\n  \n  return NextResponse.json({ message: \"Login success\" });\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,oBAAoB;IACpB,iBAAiB;AACnB;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAEnD,YAAY;IACZ,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,KAAK,CAC7B,0CACA;QAAC;KAAS;IAGZ,sBAAsB;IACtB,MAAM,OAAO,IAAI,CAAC,EAAE;IAEpB,IAAI,SAAS,UAAU;QACrB,IAAI,MAAM;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAc,GACzB;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,KAAK,OAAO,CAChB,wDACA;YAAC;YAAU;SAAe;QAG5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAa;IACnD;IAEA,yBAAyB;IACzB,IAAI,CAAC,QAAQ,CAAE,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ,GAAI;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsB,GACjC;YAAE,QAAQ;QAAI;IAElB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAgB;AACtD","debugId":null}}]
}